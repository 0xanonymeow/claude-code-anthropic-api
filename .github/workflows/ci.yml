name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
        pip install -e .

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy flake8 bandit
        pip install -r requirements.txt
        pip install -e .

    - name: Run Black
      run: black --check src/ tests/

    - name: Run isort
      run: isort --check-only src/ tests/

    - name: Run MyPy
      run: mypy src/ --ignore-missing-imports

    - name: Run Flake8
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run Bandit security check
      run: bandit -r src/ -f json

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t claude-code-anthropic-api:latest .

    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name test-container claude-code-anthropic-api:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container

    - name: Login to Docker Hub (optional)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub (optional)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker tag claude-code-anthropic-api:latest ${{ secrets.DOCKER_USERNAME }}/claude-code-anthropic-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/claude-code-anthropic-api:latest